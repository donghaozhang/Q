---
description:
globs:
alwaysApply: false
---
# Suna Frontend Conventions

## Frontend File Structure

```
frontend/src/
├── app/                              # Next.js App Router
│   ├── (dashboard)/                  # Dashboard Route Group
│   │   ├── (personalAccount)/        # Personal Account Layout
│   │   │   ├── settings/             # Personal Settings Pages
│   │   │   │   ├── billing/          # Billing Management
│   │   │   │   │   ├── page.tsx      # Billing Page
│   │   │   │   │   └── loading.tsx   # Billing Loading State
│   │   │   │   ├── teams/            # Team Management
│   │   │   │   │   ├── page.tsx      # Teams Page
│   │   │   │   │   └── components/   # Team-specific Components
│   │   │   │   ├── page.tsx          # Main Settings Page
│   │   │   │   └── layout.tsx        # Settings Layout
│   │   │   └── layout.tsx            # Personal Account Layout
│   │   ├── (teamAccount)/            # Team Account Layout
│   │   │   └── [accountSlug]/        # Dynamic Team Routes
│   │   │       ├── settings/         # Team Settings
│   │   │       │   ├── billing/      # Team Billing
│   │   │       │   ├── members/      # Team Members
│   │   │       │   ├── page.tsx      # Team Settings Page
│   │   │       │   └── layout.tsx    # Team Settings Layout
│   │   │       ├── page.tsx          # Team Dashboard
│   │   │       └── layout.tsx        # Team Layout
│   │   ├── agents/                   # Agent Management
│   │   │   ├── [threadId]/           # Individual Agent Thread
│   │   │   │   ├── page.tsx          # Thread Page
│   │   │   │   ├── loading.tsx       # Thread Loading
│   │   │   │   └── error.tsx         # Thread Error Boundary
│   │   │   ├── builder/              # Agent Builder Interface
│   │   │   │   ├── page.tsx          # Builder Page
│   │   │   │   └── components/       # Builder Components
│   │   │   ├── marketplace/          # Agent Marketplace
│   │   │   │   ├── page.tsx          # Marketplace Page
│   │   │   │   └── components/       # Marketplace Components
│   │   │   ├── page.tsx              # Agents Overview
│   │   │   └── layout.tsx            # Agents Layout
│   │   ├── dashboard/                # Main Dashboard
│   │   │   ├── page.tsx              # Dashboard Page
│   │   │   ├── loading.tsx           # Dashboard Loading
│   │   │   └── components/           # Dashboard Components
│   │   └── layout.tsx                # Dashboard Root Layout
│   ├── (home)/                       # Home Route Group
│   │   ├── page.tsx                  # Landing Page
│   │   ├── layout.tsx                # Home Layout
│   │   └── components/               # Home-specific Components
│   ├── auth/                         # Authentication Pages
│   │   ├── callback/                 # OAuth Callback
│   │   │   └── page.tsx              # Callback Handler
│   │   ├── reset-password/           # Password Reset
│   │   │   └── page.tsx              # Reset Password Page
│   │   ├── signin/                   # Sign In Page
│   │   │   └── page.tsx              # Sign In Form
│   │   └── signup/                   # Sign Up Page
│   │       └── page.tsx              # Sign Up Form
│   ├── share/                        # Public Thread Sharing
│   │   └── [threadId]/               # Shared Thread View
│   │       ├── page.tsx              # Public Thread Page
│   │       └── layout.tsx            # Public Layout
│   ├── api/                          # API Routes (Server Actions)
│   │   ├── auth/                     # Authentication API
│   │   ├── threads/                  # Thread Management API
│   │   ├── agents/                   # Agent Management API
│   │   └── webhooks/                 # Webhook Handlers
│   ├── globals.css                   # Global Styles
│   ├── layout.tsx                    # Root Layout
│   ├── page.tsx                      # Root Page (Redirect)
│   ├── loading.tsx                   # Global Loading UI
│   ├── error.tsx                     # Global Error UI
│   └── not-found.tsx                 # 404 Page
├── components/                       # Reusable Components
│   ├── basejump/                     # Base Authentication Components
│   │   ├── auth-provider.tsx         # Auth Context Provider
│   │   ├── login-form.tsx            # Login Form Component
│   │   ├── signup-form.tsx           # Signup Form Component
│   │   └── protected-route.tsx       # Route Protection
│   ├── billing/                      # Billing Components
│   │   ├── subscription-card.tsx     # Subscription Display
│   │   ├── billing-history.tsx      # Payment History
│   │   ├── upgrade-modal.tsx         # Upgrade Dialog
│   │   └── payment-form.tsx          # Payment Form
│   ├── file-renderers/               # File Display Components
│   │   ├── pdf-renderer.tsx          # PDF Viewer
│   │   ├── image-renderer.tsx        # Image Viewer
│   │   ├── text-renderer.tsx         # Text File Viewer
│   │   └── code-renderer.tsx         # Code Syntax Highlighter
│   ├── home/                         # Landing Page Components
│   │   ├── sections/                 # Page Sections
│   │   │   ├── hero-section.tsx      # Hero Banner
│   │   │   ├── features-section.tsx  # Features Overview
│   │   │   ├── use-cases-section.tsx # Use Cases Display
│   │   │   └── cta-section.tsx       # Call to Action
│   │   └── ui/                       # Home UI Components
│   │       ├── animated-demo.tsx     # Demo Animation
│   │       ├── feature-card.tsx      # Feature Card
│   │       └── testimonial.tsx       # User Testimonial
│   ├── sidebar/                      # Navigation Sidebar
│   │   ├── sidebar.tsx               # Main Sidebar Component
│   │   ├── sidebar-item.tsx          # Individual Nav Item
│   │   ├── sidebar-header.tsx        # Sidebar Header
│   │   └── sidebar-footer.tsx        # Sidebar Footer
│   ├── thread/                       # Chat Thread Components
│   │   ├── tool-views/               # Tool Result Renderers
│   │   │   ├── browser-view.tsx      # Browser Automation Results
│   │   │   ├── code-view.tsx         # Code Execution Results
│   │   │   ├── file-view.tsx         # File Operation Results
│   │   │   ├── search-view.tsx       # Search Results Display
│   │   │   └── api-view.tsx          # API Call Results
│   │   ├── chat-interface.tsx        # Main Chat Interface
│   │   ├── message-list.tsx          # Message Display List
│   │   ├── message-item.tsx          # Individual Message
│   │   ├── thread-header.tsx         # Thread Header with Actions
│   │   ├── input-area.tsx            # Message Input Area
│   │   ├── file-upload.tsx           # File Upload Component
│   │   └── typing-indicator.tsx      # Typing Animation
│   └── ui/                           # Shared UI Components
│       ├── button.tsx                # Button Component
│       ├── input.tsx                 # Input Field
│       ├── dialog.tsx                # Modal Dialog
│       ├── toast.tsx                 # Notification Toast
│       ├── loading-spinner.tsx       # Loading Animation
│       ├── badge.tsx                 # Status Badge
│       ├── dropdown.tsx              # Dropdown Menu
│       ├── tabs.tsx                  # Tab Navigation
│       ├── card.tsx                  # Card Container
│       └── avatar.tsx                # User Avatar
├── contexts/                         # React Context Providers
│   ├── auth-context.tsx              # Authentication State
│   ├── theme-context.tsx             # Theme Management
│   ├── websocket-context.tsx         # Real-time Communication
│   └── thread-context.tsx            # Thread State Management
├── hooks/                            # Custom React Hooks
│   ├── use-auth.ts                   # Authentication Hook
│   ├── use-threads.ts                # Thread Management
│   ├── use-websocket.ts              # WebSocket Connection
│   ├── use-agents.ts                 # Agent Management
│   ├── use-local-storage.ts          # Local Storage Hook
│   ├── use-debounce.ts               # Debounced Values
│   └── use-intersection.ts           # Intersection Observer
├── lib/                              # Frontend Utilities
│   ├── actions/                      # Server Actions
│   │   ├── auth.ts                   # Authentication Actions
│   │   ├── threads.ts                # Thread Management Actions
│   │   ├── agents.ts                 # Agent Management Actions
│   │   └── files.ts                  # File Management Actions
│   ├── supabase/                     # Supabase Configuration
│   │   ├── client.ts                 # Browser Client
│   │   ├── server.ts                 # Server Client
│   │   ├── middleware.ts             # Auth Middleware
│   │   └── types.ts                  # Database Types
│   └── utils/                        # Utility Functions
│       ├── cn.ts                     # Tailwind Class Names
│       ├── date.ts                   # Date Formatting
│       ├── format.ts                 # Text Formatting
│       ├── validation.ts             # Form Validation
│       └── constants.ts              # App Constants
├── providers/                        # React Query and Global Providers
│   ├── query-provider.tsx            # React Query Provider
│   ├── toast-provider.tsx            # Toast Notification Provider
│   └── theme-provider.tsx            # Theme Provider
├── types/                            # TypeScript Definitions
│   ├── auth.ts                       # Authentication Types
│   ├── thread.ts                     # Thread and Message Types
│   ├── agent.ts                      # Agent Types
│   ├── tool.ts                       # Tool Types
│   └── global.ts                     # Global Types
└── styles/                           # Styling
    ├── globals.css                   # Global CSS
    └── components.css                # Component-specific Styles
```

## Next.js App Router Conventions

### Route Organization
- **Route Groups**: Use `(groupName)` for layout organization without affecting URL structure
- **Dynamic Routes**: Use `[param]` for dynamic segments, `[...slug]` for catch-all routes
- **Parallel Routes**: Use `@folder` for parallel route rendering in layouts
- **Intercepting Routes**: Use `(..)` notation for route interception

### File Naming Conventions
- **page.tsx**: Route component that renders the page content
- **layout.tsx**: Shared layout component for nested routes
- **loading.tsx**: Loading UI that shows while page loads
- **error.tsx**: Error boundary for handling route errors
- **not-found.tsx**: 404 page for unmatched routes
- **template.tsx**: Template for routes that need fresh state on navigation

### Server Components vs Client Components
```typescript
// Server Component (default)
export default function ServerPage() {
  // Runs on server, can access databases directly
  return <div>Server rendered content</div>
}

// Client Component
'use client'
export default function ClientComponent() {
  // Runs on client, can use hooks and event handlers
  const [state, setState] = useState()
  return <div onClick={() => setState('clicked')}>Interactive content</div>
}
```

## React Component Patterns

### Component Structure
```typescript
// components/ui/button.tsx
import { cn } from '@/lib/utils/cn'
import { ButtonHTMLAttributes, forwardRef } from 'react'

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'destructive'
  size?: 'sm' | 'md' | 'lg'
  loading?: boolean
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'primary', size = 'md', loading, children, ...props }, ref) => {
    return (
      <button
        ref={ref}
        className={cn(
          'inline-flex items-center justify-center rounded-md font-medium transition-colors',
          'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring',
          'disabled:pointer-events-none disabled:opacity-50',
          {
            'bg-primary text-primary-foreground hover:bg-primary/90': variant === 'primary',
            'bg-secondary text-secondary-foreground hover:bg-secondary/80': variant === 'secondary',
            'bg-destructive text-destructive-foreground hover:bg-destructive/90': variant === 'destructive',
          },
          {
            'h-8 px-3 text-sm': size === 'sm',
            'h-10 px-4': size === 'md',
            'h-12 px-6 text-lg': size === 'lg',
          },
          className
        )}
        disabled={loading}
        {...props}
      >
        {loading && <LoadingSpinner className="mr-2 h-4 w-4" />}
        {children}
      </button>
    )
  }
)

Button.displayName = 'Button'
export { Button }
```

### Custom Hooks Pattern
```typescript
// hooks/use-threads.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { createThread, fetchThreads, updateThread } from '@/lib/actions/threads'

export function useThreads() {
  return useQuery({
    queryKey: ['threads'],
    queryFn: fetchThreads,
    staleTime: 5 * 60 * 1000, // 5 minutes
  })
}

export function useCreateThread() {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: createThread,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['threads'] })
    },
  })
}

export function useThread(threadId: string) {
  return useQuery({
    queryKey: ['threads', threadId],
    queryFn: () => fetchThread(threadId),
    enabled: !!threadId,
  })
}
```

### Context Pattern
```typescript
// contexts/auth-context.tsx
'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { User } from '@supabase/supabase-js'
import { supabase } from '@/lib/supabase/client'

interface AuthContextType {
  user: User | null
  loading: boolean
  signIn: (email: string, password: string) => Promise<void>
  signOut: () => Promise<void>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        setUser(session?.user ?? null)
        setLoading(false)
      }
    )

    return () => subscription.unsubscribe()
  }, [])

  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({ email, password })
    if (error) throw error
  }

  const signOut = async () => {
    const { error } = await supabase.auth.signOut()
    if (error) throw error
  }

  return (
    <AuthContext.Provider value={{ user, loading, signIn, signOut }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
```

## TypeScript Conventions

### Type Definitions
```typescript
// types/thread.ts
export interface Thread {
  id: string
  title: string
  messages: Message[]
  created_at: string
  updated_at: string
  user_id: string
  is_public: boolean
  metadata?: Record<string, any>
}

export interface Message {
  id: string
  thread_id: string
  role: 'user' | 'assistant' | 'system'
  content: string
  tool_calls?: ToolCall[]
  created_at: string
}

export interface ToolCall {
  id: string
  type: string
  function: {
    name: string
    arguments: string
  }
  result?: any
}

// Union types for specific cases
export type MessageRole = 'user' | 'assistant' | 'system'
export type ThreadStatus = 'active' | 'archived' | 'deleted'

// Utility types
export type CreateThreadRequest = Omit<Thread, 'id' | 'created_at' | 'updated_at'>
export type UpdateThreadRequest = Partial<Pick<Thread, 'title' | 'is_public' | 'metadata'>>
```

### Component Props with Generics
```typescript
// components/ui/data-table.tsx
interface DataTableProps<T> {
  data: T[]
  columns: ColumnDef<T>[]
  loading?: boolean
  onRowClick?: (row: T) => void
  className?: string
}

export function DataTable<T>({
  data,
  columns,
  loading,
  onRowClick,
  className
}: DataTableProps<T>) {
  // Component implementation
}
```

## Styling Guidelines

### Tailwind CSS Conventions
- Use design tokens from `tailwind.config.js`
- Prefer utility classes over custom CSS
- Use `cn()` utility for conditional class names
- Follow mobile-first responsive design

### Component Styling Pattern
```typescript
const cardVariants = cva(
  'rounded-lg border bg-card text-card-foreground shadow-sm',
  {
    variants: {
      size: {
        sm: 'p-4',
        md: 'p-6',
        lg: 'p-8',
      },
      variant: {
        default: 'border-border',
        destructive: 'border-destructive/50 text-destructive',
        success: 'border-green-200 bg-green-50 text-green-800',
      },
    },
    defaultVariants: {
      size: 'md',
      variant: 'default',
    },
  }
)

interface CardProps extends HTMLAttributes<HTMLDivElement> {
  size?: 'sm' | 'md' | 'lg'
  variant?: 'default' | 'destructive' | 'success'
}

const Card = ({ className, size, variant, ...props }: CardProps) => (
  <div className={cn(cardVariants({ size, variant }), className)} {...props} />
)
```

## State Management

### React Query for Server State
```typescript
// lib/queries/threads.ts
export const threadQueries = {
  all: ['threads'] as const,
  lists: () => [...threadQueries.all, 'list'] as const,
  list: (filters: ThreadFilters) => [...threadQueries.lists(), filters] as const,
  details: () => [...threadQueries.all, 'detail'] as const,
  detail: (id: string) => [...threadQueries.details(), id] as const,
}

// Usage in component
const { data: threads, isLoading } = useQuery({
  queryKey: threadQueries.lists(),
  queryFn: fetchThreads,
})
```

### Local State Management
- Use `useState` for local component state
- Use `useReducer` for complex state logic
- Use Context for shared state across components
- Avoid prop drilling with composition patterns

## Performance Optimization

### Code Splitting
```typescript
// Dynamic imports for code splitting
const AgentBuilder = dynamic(() => import('@/components/agents/agent-builder'), {
  loading: () => <LoadingSpinner />,
  ssr: false,
})

// Route-level code splitting (automatic with App Router)
export default function AgentPage() {
  return <AgentBuilder />
}
```

### Memoization
```typescript
// useMemo for expensive calculations
const expensiveValue = useMemo(() => {
  return processLargeDataSet(data)
}, [data])

// useCallback for function references
const handleSubmit = useCallback((formData: FormData) => {
  submitForm(formData)
}, [submitForm])

// React.memo for component memoization
const MemoizedComponent = memo(({ data }: { data: ComplexData }) => {
  return <div>{/* Complex rendering */}</div>
})
```

### Image Optimization
```typescript
import Image from 'next/image'

<Image
  src="/banner.png"
  alt="Suna AI Agent Platform"
  width={1200}
  height={600}
  priority // For above-the-fold images
  placeholder="blur"
  blurDataURL="data:image/jpeg;base64,..."
/>
```

## Error Handling

### Error Boundaries
```typescript
// app/error.tsx (Route-level error boundary)
'use client'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center">
      <h2 className="text-xl font-bold">Something went wrong!</h2>
      <button onClick={reset} className="mt-4 rounded bg-blue-500 px-4 py-2 text-white">
        Try again
      </button>
    </div>
  )
}
```

### Form Validation
```typescript
import { z } from 'zod'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'

const createThreadSchema = z.object({
  title: z.string().min(1, 'Title is required').max(100, 'Title too long'),
  description: z.string().optional(),
  is_public: z.boolean().default(false),
})

type CreateThreadForm = z.infer<typeof createThreadSchema>

export function CreateThreadForm() {
  const { register, handleSubmit, formState: { errors } } = useForm<CreateThreadForm>({
    resolver: zodResolver(createThreadSchema),
  })

  const onSubmit = (data: CreateThreadForm) => {
    // Handle form submission
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register('title')} />
      {errors.title && <span className="text-red-500">{errors.title.message}</span>}
    </form>
  )
}
```
