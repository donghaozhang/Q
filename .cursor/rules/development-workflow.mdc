---
description: 
globs: 
alwaysApply: true
---
# Development Workflow & Setup

## Development File Structure
```
suna/
‚îú‚îÄ‚îÄ setup.py                   # Automated project setup script
‚îú‚îÄ‚îÄ start.py                   # Development environment starter
‚îú‚îÄ‚îÄ mise.toml                  # Development environment config
‚îú‚îÄ‚îÄ docker-compose.yaml        # Container orchestration
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ .env.example           # Backend environment template
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt       # Python dependencies
‚îÇ   ‚îú‚îÄ‚îÄ pyproject.toml         # Poetry configuration
‚îÇ   ‚îú‚îÄ‚îÄ poetry.lock            # Locked dependencies
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile             # Backend container config
‚îÇ   ‚îî‚îÄ‚îÄ run_agent_background.py # Background agent runner
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ .env.example           # Frontend environment template
‚îÇ   ‚îú‚îÄ‚îÄ package.json           # Node.js dependencies
‚îÇ   ‚îú‚îÄ‚îÄ package-lock.json      # Locked dependencies
‚îÇ   ‚îú‚îÄ‚îÄ next.config.ts         # Next.js configuration
‚îÇ   ‚îú‚îÄ‚îÄ tailwind.config.ts     # Tailwind CSS config
‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json          # TypeScript configuration
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile             # Frontend container config
‚îÇ   ‚îú‚îÄ‚îÄ .prettierrc            # Code formatting config
‚îÇ   ‚îî‚îÄ‚îÄ .prettierignore        # Prettier ignore patterns
‚îî‚îÄ‚îÄ supabase/
    ‚îú‚îÄ‚îÄ config.toml            # Supabase project config
    ‚îî‚îÄ‚îÄ migrations/            # Database schema changes
```

## Quick Start Development

### Automated Setup (Recommended)
```bash
# Clone repository
git clone https://github.com/donghaozhang/suna.git
cd suna

# Run automated setup (handles all environment setup)
python setup.py

# Start development environment (starts all services)
python start.py
```

### Fast Development Workflow
For faster frontend development (avoid Docker rebuilds):

```bash
# Keep backend in Docker (use space, not hyphen)
docker compose up backend redis rabbitmq worker

# Run frontend locally for instant hot reload
cd frontend
npm install
npm run dev  # Starts on localhost:3000
```

Benefits:
- ‚ö° **Instant hot reload** - changes appear immediately
- üîß **No rebuilds** needed  
- üêõ **Better debugging** with browser dev tools

### Docker Commands (Modern Syntax)
```bash
# Use "docker compose" (space) not "docker-compose" (hyphen)
docker compose up
docker compose ps
docker compose restart frontend
docker compose down
docker compose build --no-cache frontend

# Clear cache when needed
docker system prune -a -f
```

## Environment Configuration

### Backend Environment (backend/.env)
```env
# Database
SUPABASE_URL=your_supabase_url
SUPABASE_ANON_KEY=your_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# LLM Providers
ANTHROPIC_API_KEY=your_anthropic_key
OPENAI_API_KEY=your_openai_key

# Optional Services
TAVILY_API_KEY=your_tavily_key
FIRECRAWL_API_KEY=your_firecrawl_key
```

### Frontend Environment (frontend/.env.local)
```env
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
NEXT_PUBLIC_BACKEND_URL=http://localhost:8000/api
NEXT_PUBLIC_URL=http://localhost:3000
```

## Quriosity Branding System

### Updated Site Configuration
- **Site Name**: "Quriosity" (not "Kortix Suna")
- **Product Name**: "Q" (not "Suna") 
- **Repository Display**: "Quriosity/Q"
- **Footer Links**: Point to https://quriosity.com.au/

### Logo Assets (Three-Logo System)
- `kortix-symbol.svg` - Blue Quriosity "Q" symbol (32x32px default)
- `kortix-logo.svg` - Horizontal logo for light mode  
- `kortix-logo-white.svg` - Horizontal logo for dark mode

### Logo Component Usage
```typescript
// Standard usage with proper alt text
<KortixLogo size={32} />  // Default sidebar size
<KortixLogo size={16} />  // Chat avatar
<KortixLogo />            // Uses 32px default

// All logos use alt="Quriosity" or alt="Quriosity Logo"
```

## Recent UI/UX Improvements

### FlickeringGrid and Border Removals
- **Removed FlickeringGrid vertical lines** from home sections
- **Removed horizontal borders** between sections for seamless flow
- **Unified backgrounds** with full-width coverage instead of segmented grids
- **Clean gradients** replace complex grid patterns

### Dark Mode Support
```typescript
// Proper dark mode text classes
text-black dark:text-white
bg-white dark:bg-black
bg-secondary/10  // Subtle backgrounds instead of bright colors
```

### Component Updates
- **Section Headers**: No more `border-b` classes
- **CTA Sections**: Use `bg-secondary/10` instead of bright colors
- **Agent Cards**: Consistent styling without special borders or scaling

## Development Commands

### Backend
```bash
cd backend
poetry install
poetry run python api.py           # Main API
poetry run python sandbox/api.py   # Sandbox
poetry run python mcp_local/api.py # MCP server
```

### Frontend
```bash
cd frontend
npm install
npm run dev      # Development server
npm run build    # Production build
npm run format   # Code formatting
```

### Database
```bash
supabase db push    # Apply migrations
supabase db reset   # Reset local database
```

## Git Workflow
```bash
git add .
git commit -m "feat: description of changes"
git push
```

## File Organization

### Backend Structure
- `backend/api.py` - Main FastAPI application
- `backend/agent/` - Agent system and tools
- `backend/services/` - Business logic services
- `backend/sandbox/` - Execution environment

### Frontend Structure  
- `frontend/src/app/` - Next.js App Router pages
- `frontend/src/components/` - React components
- `frontend/src/hooks/` - Custom React hooks
- `frontend/src/lib/` - Utilities and configurations

### Home Page Components
- `components/home/sections/quriosity-showcase.tsx` - 6 agent demonstrations
- `components/home/sections/hero-section.tsx` - Main hero section
- `components/home/sections/footer-section.tsx` - Footer with Quriosity links

## Project Structure Conventions

### Backend Organization
- **[backend/api.py](mdc:backend/api.py)** - Main FastAPI application entry point
- **[backend/agent/](mdc:backend/agent)** - Agent system components
  - `api.py` - Agent API endpoints
  - `run.py` - Agent execution logic
  - `prompt.py` - System prompts and templates
  - `tools/` - Tool implementations
- **[backend/services/](mdc:backend/services)** - Business logic services
- **[backend/agentpress/](mdc:backend/agentpress)** - Agent framework
- **[backend/sandbox/](mdc:backend/sandbox)** - Execution environment
- **[backend/mcp_local/](mdc:backend/mcp_local)** - Model Context Protocol integration

### Frontend Organization
- **[frontend/src/app/](mdc:frontend/src/app)** - Next.js App Router pages
- **[frontend/src/components/](mdc:frontend/src/components)** - React components
- **[frontend/src/hooks/](mdc:frontend/src/hooks)** - Custom React hooks
- **[frontend/src/lib/](mdc:frontend/src/lib)** - Utilities and configurations
- **[frontend/src/providers/](mdc:frontend/src/providers)** - Context providers
- **[frontend/src/contexts/](mdc:frontend/src/contexts)** - React contexts

## Agent Tool Configuration

### Fal Media Tool (Image Generation)
- **Enabled by Default**: The `FalMediaTool` for image and video generation is now enabled by default for all agents, including custom ones.
- **File Location**: The logic for this is in `backend/agent/run.py`.
- **Behavior**: Previously, this tool was only active for the default "Suna" agent. The code has been changed so that any agent created will have access to the `fal_media_generation` function, unless the tool is explicitly disabled in the agent's configuration.
- **Requirement**: The `FAL_KEY` environment variable must be set in the `backend/.env` file for the tool to function.

## Branding & Logo Assets

### Quriosity Branding System
The application uses **Quriosity** branding with a three-logo system:

**Primary Logo Files:**
- `kortix-symbol.svg` - Blue Quriosity "Q" symbol (32x32px default)
- `kortix-logo.svg` - Horizontal Quriosity logo for light mode  
- `kortix-logo-white.svg` - Horizontal Quriosity logo for dark mode

**Backup Files:**
- `kortix-symbol-backup.svg` - Original Kortix symbol
- `kortix-logo-white-backup.svg` - Original Kortix logo
- `Quriosity Favicon_App Icon.svg` - Source Quriosity design file

### Logo Component Usage
```typescript
// Sidebar logo with custom size
<KortixLogo size={32} />

// Default logo (32px default size)  
<KortixLogo />

// Chat avatar (smaller)
<KortixLogo size={16} />
```

### Logo Implementation Standards
- **Component**: `frontend/src/components/sidebar/kortix-logo.tsx`
- **Alt Text**: All logos use `alt="Quriosity"` or `alt="Quriosity Logo"`
- **Theme Support**: Automatic light/dark mode switching
- **Default Size**: 32x32px (increased from 24px for better visibility)
- **Size Variants**: 16px (chat), 24px (compact), 32px (default), 40px+ (headers)

### Branding Rules
- **Site Name**: "Quriosity" (not "Kortix Suna")
- **Product Name**: "Q" (not "Suna") 
- **Company**: "Quriosity" (not "Kortix")
- **Description**: "Q by Quriosity ‚Äì is a generalist AI Agent"
- **Footer Title**: "Quriosity" (not "Kortix")
- **Repository Display**: "Quriosity/Q" (not "kortix-ai/suna")
- **External Links**: Point to https://quriosity.com.au/ for most footer links
- **Cache Clearing**: Run `rm -rf .next` when updating logo components

### Homepage Sections
- **Quriosity Showcase**: New section with 6 agent cards between Hero and Use Cases
  - Game Agent, Design Agent, Brand Agent, Web Agent, Art Agent, Clone Agent
  - Color-coded cards with interactive hover effects
  - Located in `frontend/src/components/home/sections/quriosity-showcase.tsx`

### Footer Configuration
- **Location**: `frontend/src/lib/home.tsx` in `footerLinks` array
- **Updated Links**: Most footer links now point to https://quriosity.com.au/
- **Exceptions**: 
  - Contact remains as `mailto:hey@kortix.ai`
  - GitHub still points to code repository
- **Sidebar CTA**: "Join Our Team" link points to https://quriosity.com.au/

### Build Error Fixes
- **HeroVideoSection Removed**: Deleted problematic `hero-video-section.tsx` that contained unauthorized thum.io image service
- **Import Cleanup**: Removed all imports and usages of `HeroVideoSection` from `hero-section.tsx`
- **Layout Optimization**: Reduced showcase section padding from `py-20` to `py-10` for better spacing

### FlickeringGrid Background System
- **Universal Implementation**: All home page sections now use FlickeringGrid backgrounds for visual consistency
- **Standard Pattern**: Left/right grid panels (1/3 width each) with gradient overlays
- **Consistent Parameters**: `squareSize={2.5}`, `gridGap={2.5}`, `maxOpacity={0.3}`, `flickerChance={0.02}`
- **Sections Updated**: 
  - `use-cases-section.tsx` - Added FlickeringGrid + removed `<hr>` divider
  - `open-source-section.tsx` - Added FlickeringGrid background
  - `pricing-section.tsx` - Added FlickeringGrid background
  - `cta-section.tsx` - Added FlickeringGrid + changed to light blue (`bg-sky-400`)
  - `quriosity-showcase.tsx` - Already had FlickeringGrid
  - `hero-section.tsx` - Already had FlickeringGrid
  - `footer-section.tsx` - Already had FlickeringGrid

### Horizontal Divider Removal
- **Main Container**: Removed `divide-y divide-border` from `frontend/src/app/(home)/page.tsx`
- **Section Dividers**: Removed all `<hr>`, `border-t`, `border-b` elements between sections
- **Mobile Menu**: Removed `border-b border-border` from navbar menu items
- **Auth Dialog**: Removed horizontal line in hero section's email/password divider
- **Design Goal**: Seamless section flow without visible border interruptions

## Development Tools & Scripts

### Utility Scripts
- **[setup.py](mdc:setup.py)** - Automated project setup and environment configuration
- **[start.py](mdc:start.py)** - Development environment starter with service orchestration
- **[backend/utils/scripts/](mdc:backend/utils/scripts)** - Maintenance and utility scripts

### Container Development
```bash
# Start all services with Docker Compose
docker compose up

# Start specific services
docker compose up backend frontend

# Rebuild containers
docker compose build

# View logs
docker compose logs -f backend
docker compose logs -f frontend

# Stop all services
docker compose down

# Clear cache and rebuild (when needed)
docker compose down
docker compose build --no-cache frontend
docker compose up -d
```

### Fast Development Workflow
For faster frontend development (avoid Docker rebuilds):

```bash
# Keep backend in Docker
docker compose up backend redis rabbitmq worker

# Run frontend locally for instant hot reload
cd frontend
npm install
npm run dev  # Starts on localhost:3000
```

Benefits:
- ‚ö° **Instant hot reload** - changes appear immediately
- üîß **No rebuilds** needed  
- üêõ **Better debugging** with browser dev tools
- üöÄ **Faster development cycle**

## Database Management

### Supabase Setup and Operations
```bash
# Initialize Supabase in project
supabase init

# Link to remote project
supabase link --project-ref your-project-ref

# Apply migrations to local database
supabase db reset

# Apply migrations to remote database
supabase db push

# Generate TypeScript types
supabase gen types typescript --local > types/supabase.ts
```

### Migration Workflow
1. **Create Migration**: `supabase migration new migration_name`
2. **Edit SQL**: Add changes in [backend/supabase/migrations/](mdc:backend/supabase/migrations)
3. **Test Locally**: `supabase db reset`
4. **Deploy**: `supabase db push`

## Agent Development

### Agent Tool Development
```bash
# Create new tool
touch backend/agent/tools/my_new_tool.py

# Register tool in registry
# Edit backend/agentpress/tool_registry.py

# Test tool in sandbox
poetry run python -m pytest tests/test_tools.py
```

### MCP Integration
```bash
# Start MCP local server
cd backend
poetry run python mcp_local/api.py

# Test MCP client connection
poetry run python test_mcp_use.py
```

## Code Quality & Standards

### Python (Backend)
- **Formatting**: Black code formatter
- **Type Checking**: mypy for static type analysis
- **Linting**: flake8 for code quality
- **Testing**: pytest for unit and integration tests

### TypeScript (Frontend)
- **Formatting**: Prettier for consistent code style
- **Type Checking**: TypeScript strict mode
- **Linting**: ESLint for code quality
- **Testing**: Jest for unit tests

### Git Workflow
- **Branch Naming**: `feature/description`, `fix/description`, `hotfix/description`
- **Commit Messages**: Conventional commits format
- **Pull Requests**: Required for main branch
- **Code Review**: At least one approval required

## Environment Management

### Development Environments
- **Local**: Use `.env` files (never commit these)
- **Docker**: Environment variables in docker-compose.yaml
- **Production**: Secure environment variable injection

### Feature Flags
- **Backend**: Use environment variables for feature toggles
- **Frontend**: [flags.ts](mdc:frontend/src/flags.ts) for client-side feature management

## Monitoring & Debugging

### Error Tracking
- **Sentry Integration**: [backend/sentry.py](mdc:backend/sentry.py) and [frontend/src/sentry.config.ts](mdc:frontend/src/sentry.config.ts)
- **LLM Observability**: Langfuse integration in [backend/services/langfuse.py](mdc:backend/services/langfuse.py)

### Performance Monitoring
- **Backend**: FastAPI built-in metrics and logging
- **Frontend**: Next.js built-in analytics and Core Web Vitals
- **Database**: Supabase dashboard for query performance

## Testing Strategy

### Backend Testing
```bash
# Run all tests
poetry run pytest

# Run specific test file
poetry run pytest tests/test_agents.py

# Run with coverage
poetry run pytest --cov=backend
```

### Frontend Testing
```bash
# Run unit tests
npm run test

# Run tests in watch mode
npm run test:watch

# Run end-to-end tests
npm run test:e2e
```

## Feature Flag Management

### Overview
The application uses a Redis-based feature flag system to control feature availability. Feature flags allow enabling/disabling functionality without code deployments.

### Available Feature Flags
- **`custom_agents`**: Controls custom agent creation and management functionality
- **`agent_marketplace`**: Controls agent marketplace features

### Managing Feature Flags

#### Enable a Feature Flag
```bash
# From within Docker container (recommended)
docker compose exec backend bash -c "cd /app && PYTHONPATH=/app python flags/setup.py enable custom_agents 'Enable custom agent creation'"

# Check flag status
curl -X GET http://localhost:8000/api/feature-flags/custom_agents
```

#### Disable a Feature Flag
```bash
docker compose exec backend bash -c "cd /app && PYTHONPATH=/app python flags/setup.py disable custom_agents 'Disable custom agents'"
```

#### List All Feature Flags
```bash
docker compose exec backend bash -c "cd /app && PYTHONPATH=/app python flags/setup.py list"
```

#### Check Flag Status
```bash
docker compose exec backend bash -c "cd /app && PYTHONPATH=/app python flags/setup.py status custom_agents"
```

### Feature Flag CLI Commands
```bash
# Enable with description
python flags/setup.py enable flag_name "Description"

# Disable with description  
python flags/setup.py disable flag_name "Description"

# Toggle flag state
python flags/setup.py toggle flag_name "Description"

# Delete flag completely
python flags/setup.py delete flag_name

# Show detailed status
python flags/setup.py status flag_name

# List all flags
python flags/setup.py list
```

### Frontend Feature Flag Usage
```typescript
// Check feature flag in React components
const { flags, loading } = useFeatureFlags(['custom_agents']);
const customAgentsEnabled = flags.custom_agents;

// Check feature flag in server components
const agentPlaygroundEnabled = await isFlagEnabled('custom_agents');
```

### Backend Feature Flag Usage
```python
# Check feature flag in API endpoints
from flags.flags import is_enabled

if not await is_enabled("custom_agents"):
    raise HTTPException(status_code=403, detail="Feature not available")
```

## Troubleshooting

### Common Issues and Solutions

#### "Custom agents is not enabled" Error
**Problem**: Frontend shows "Custom agents is not enabled" console error.

**Solution**: Enable the custom_agents feature flag:
```bash
docker compose exec backend bash -c "cd /app && PYTHONPATH=/app python flags/setup.py enable custom_agents 'Enable custom agent creation'"
```

**Verification**: Check flag status:
```bash
curl -X GET http://localhost:8000/api/feature-flags/custom_agents
```

#### Image Generation "Failed to Load Image" Error
**Problem**: Generated images show "Failed to load image" in the UI.

**Root Cause**: The `fal_media_generation` tool fails to save images to workspace due to sandbox connectivity issues, but falls back to temporary URLs that the frontend cannot render due to CORS/CSP restrictions.

**Solution**: The tool now provides enhanced error handling with detailed messages explaining the issue and providing fallback options.

**Prevention**: Ensure proper sandbox connectivity and workspace configuration.

#### Redis Connection Errors
**Problem**: Feature flag operations fail with Redis connection errors.

**Solution**: 
1. Ensure Redis container is running: `docker compose ps`
2. Restart Redis if needed: `docker compose restart redis`
3. Check Redis logs: `docker compose logs redis`

#### Docker Container Issues
**Problem**: Services fail to start or behave unexpectedly.

**Solutions**:
```bash
# Clear Docker cache and rebuild
docker compose down
docker system prune -a -f
docker compose build --no-cache
docker compose up -d

# Check container logs
docker compose logs -f backend
docker compose logs -f frontend

# Restart specific service
docker compose restart backend
```

#### Frontend Build Errors
**Problem**: Next.js build fails or shows warnings.

**Solutions**:
```bash
# Clear Next.js cache
cd frontend
rm -rf .next
npm run build

# Clear node_modules and reinstall
rm -rf node_modules package-lock.json
npm install

# Check for TypeScript errors
npm run type-check
```

#### Database Migration Issues
**Problem**: Supabase migrations fail or database is out of sync.

**Solutions**:
```bash
# Reset local database
supabase db reset

# Apply migrations manually
supabase db push

# Check migration status
supabase migration list
```

### Debug Commands

#### Check Service Health
```bash
# Check all services
docker compose ps

# Check specific service logs
docker compose logs -f backend
docker compose logs -f frontend
docker compose logs -f redis

# Check API health
curl http://localhost:8000/health
curl http://localhost:3000/api/health
```

#### Database Debugging
```bash
# Connect to local Supabase
supabase db connect

# Check database status
supabase status

# View migration history
supabase migration list
```

#### Feature Flag Debugging
```bash
# List all flags and their status
docker compose exec backend bash -c "cd /app && PYTHONPATH=/app python flags/setup.py list"

# Check Redis directly
docker compose exec redis redis-cli keys "feature_flag:*"
docker compose exec redis redis-cli hgetall "feature_flag:custom_agents"
```

### Performance Optimization

#### Frontend Performance
```bash
# Analyze bundle size
cd frontend
npm run analyze

# Check Core Web Vitals
npm run lighthouse

# Optimize images
npm run optimize-images
```

#### Backend Performance
```bash
# Check API response times
curl -w "@curl-format.txt" -o /dev/null -s http://localhost:8000/api/health

# Monitor memory usage
docker stats

# Check database query performance
# Use Supabase dashboard for query analysis
```

### Log Analysis

#### Backend Logs
```bash
# View real-time logs
docker compose logs -f backend

# Search for specific errors
docker compose logs backend | grep -i error

# View agent execution logs
docker compose logs backend | grep -i agentpress
```

#### Frontend Logs
```bash
# View Next.js logs
docker compose logs -f frontend

# Check browser console for client-side errors
# Open browser dev tools -> Console tab
```

## Testing Strategy
