---
description: 
globs: 
alwaysApply: true
---
# Frontend Conventions & Patterns

## Next.js App Router Structure

### Route Organization
- **Route Groups**: Use `(groupName)` for organizing without affecting URLs
- **Dynamic Routes**: Use `[param]` for dynamic segments  
- **Private Folders**: Use `_folder` for internal organization (not routed)

### Key Directories
```
frontend/src/
├── app/                    # Next.js App Router
│   ├── (dashboard)/        # Dashboard routes with sidebar
│   │   ├── agents/         # Agent management
│   │   ├── dashboard/      # Main dashboard  
│   │   └── projects/       # Project management
│   ├── (home)/            # Public landing pages
│   ├── auth/              # Authentication flows
│   └── api/               # API routes
├── components/            # React components
│   ├── home/              # Landing page components
│   │   └── sections/      # Page sections (hero, showcase, footer)
│   ├── thread/            # Chat/conversation UI
│   ├── sidebar/           # Navigation components
│   └── ui/                # Shared UI components (shadcn/ui)
├── hooks/                 # Custom React hooks
├── lib/                   # Utilities and configurations
└── providers/             # Context providers
```

## Component Conventions

### Component Structure
```typescript
'use client'  // Only when needed for interactivity

import { useState } from 'react'
import { cn } from '@/lib/utils'

interface ComponentProps {
  className?: string
  children?: React.ReactNode
}

export function Component({ className, children }: ComponentProps) {
  return (
    <div className={cn("default-classes", className)}>
      {children}
    </div>
  )
}
```

### Naming Conventions
- **Components**: PascalCase (`ThreadList`, `ChatInput`)
- **Files**: kebab-case (`thread-list.tsx`, `chat-input.tsx`)
- **Functions**: camelCase (`handleSubmit`, `fetchData`)

## Styling & UI Conventions

### Tailwind CSS Patterns
```typescript
// Dark mode support
"text-black dark:text-white"
"bg-white dark:bg-black"
"bg-secondary/10"  // Subtle backgrounds

// Layout patterns
"flex items-center justify-between"
"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
"space-y-4"  // Vertical spacing
"gap-4"      // Grid/flex gaps
```

### Component Composition
```typescript
// Use cn() utility for conditional classes
import { cn } from '@/lib/utils'

className={cn(
  "base-classes",
  variant === 'primary' && "variant-classes",
  disabled && "disabled-classes",
  className  // Allow override
)}
```

## Recent UI/UX Standards

### Quriosity Branding
```typescript
// Logo component usage
<KortixLogo size={32} />  // Sidebar (default)
<KortixLogo size={16} />  // Chat avatar
<KortixLogo />            // Uses 32px default

// Always use proper alt text
alt="Quriosity" or alt="Quriosity Logo"
```

### Design System Updates
- **No FlickeringGrid vertical lines** - Use clean gradients instead
- **No horizontal borders** between sections - Seamless flow
- **Unified backgrounds** - Full-width coverage, not segmented
- **Subtle colors** - Use `bg-secondary/10` instead of bright colors
- **Consistent agent cards** - No special borders or scaling

### Section Header Pattern
```typescript
// Remove border-b classes for seamless sections
<div className="container mx-auto px-4">
  <h2 className="text-3xl font-bold text-center mb-12">
    Section Title
  </h2>
  {/* Content */}
</div>
```

## State Management

### React Query Hooks
```typescript
// Follow the existing pattern in hooks/react-query/
import { useQuery, useMutation } from '@tanstack/react-query'

export function useThreads() {
  return useQuery({
    queryKey: ['threads'],
    queryFn: () => fetchThreads(),
  })
}

export function useCreateThread() {
  return useMutation({
    mutationFn: createThread,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['threads'] })
    },
  })
}
```

### Context Providers
```typescript
// Wrap providers at the root level
<Providers>
  <TooltipProvider>
    <AuthProvider>
      {children}
    </AuthProvider>
  </TooltipProvider>
</Providers>
```

## Home Page Components

### Quriosity Showcase
- Located in `components/home/sections/quriosity-showcase.tsx`
- Features 6 agent cards: Game, Design, Brand, Web, Art, Clone
- Color-coded cards with hover effects
- Positioned between Hero and Use Cases sections

### Section Structure
```typescript
// Standard home section pattern
export function SectionComponent() {
  return (
    <section className="relative py-20">
      {/* Background gradients instead of FlickeringGrid */}
      <div className="absolute inset-0 bg-gradient-to-r from-background via-transparent to-background" />
      
      <div className="container relative mx-auto px-4">
        <SectionHeader
          title="Section Title"
          description="Section description"
        />
        {/* Section content */}
      </div>
    </section>
  )
}
```

## Performance & Best Practices

### Server vs Client Components
```typescript
// Server Component (default) - for data fetching
export default async function Page() {
  const data = await fetchData()
  return <ClientComponent data={data} />
}

// Client Component - only when needed
'use client'
export function InteractiveComponent() {
  const [state, setState] = useState()
  // ... interactive logic
}
```

### Loading States
```typescript
// Use Suspense boundaries
<Suspense fallback={<LoadingSpinner />}>
  <AsyncComponent />
</Suspense>

// Loading UI patterns
{isLoading ? <Skeleton /> : <Content />}
```

### Error Boundaries
```typescript
// Wrap sensitive components
<ErrorBoundary fallback={<ErrorUI />}>
  <RiskyComponent />
</ErrorBoundary>
```
