---
description:
globs:
alwaysApply: false
---
# Agent Capabilities & Tools

## Core Agent Tools

### Computer Use & Desktop Automation
**Tool**: `computer_use_tool.py`
- Screenshot capture and analysis
- Mouse and keyboard automation
- GUI element interaction
- Window management

### Browser Automation
**Tool**: `sb_browser_tool.py`
- Web page navigation
- Element interaction (click, type, select)
- Form filling and submission
- JavaScript execution

### File System Operations
**Tool**: `sb_files_tool.py`
- File reading and writing
- Directory management
- File search and filtering
- Bulk file operations

### Shell Command Execution
**Tool**: `sb_shell_tool.py`
- Command execution with output
- Environment variable management
- Script execution
- System information gathering

### Web Search & Information Retrieval
**Tool**: `web_search_tool.py`
- Real-time web search
- Information retrieval and synthesis
- Search result ranking and filtering

### Media Generation & AI Content Creation
**Tool**: `fal_media_tool.py`
- **Image Generation**: High-quality image creation using FLUX models
- **Video Generation**: AI-powered video content creation
- **Model Support**: Multiple AI models (FLUX/dev, FLUX/schnell, etc.)
- **Enhanced Error Handling**: Comprehensive error reporting and fallback mechanisms
- **Workspace Integration**: Automatic image saving to project workspace
- **Fallback URLs**: Temporary access URLs when workspace saving fails
- **Format Support**: Multiple output formats (PNG, JPG, MP4, etc.)
- **Default Enablement**: Now enabled for all agents by default (previously only for "Suna" agent)

**Key Features**:
- Detailed error messages for troubleshooting
- Graceful degradation when sandbox connectivity issues occur
- Clear user feedback about generation success/failure
- Automatic file naming with timestamps
- Support for various aspect ratios and quality settings
- Cross-platform filename normalization using Unicode utilities

**Usage Examples**:
```python
# Generate image with specific parameters
fal_media_generation(
    prompt="A beautiful landscape at sunset",
    model="fal-ai/flux/dev",
    image_size="landscape_4_3",
    num_inference_steps=28
)
```

**Error Handling**: The tool now provides detailed error messages when image saving fails, explaining the issue and providing temporary URLs as fallback options.

**Configuration**: Requires `FAL_KEY` environment variable in `backend/.env` file.

## External Data Providers

### TavilyProvider
Advanced search and research capabilities

### FirecrawlProvider
Web scraping and content extraction

### LinkedinProvider
Professional network integration

### AmazonProvider
E-commerce and AWS integration

### RapidAPIProvider
Multi-service API access

## Agent Framework (AgentPress)

- **Context Manager**: Conversation context and memory management
- **Response Processor**: LLM response handling and formatting
- **Thread Manager**: Thread lifecycle and state management
- **Tool Registry**: Tool registration and discovery

## Infrastructure & Reliability

### Redis Retry Utilities
**Location**: `backend/utils/retry.py`
- **Purpose**: Automatic retry mechanism for Redis operations with exponential backoff
- **Features**: Configurable retry attempts, delays, and type-safe async function wrapper
- **Integration**: Used throughout backend services for improved Redis connection reliability

### Unicode File Handling
**Location**: `frontend/src/lib/utils/unicode.ts`
- **Purpose**: Cross-platform filename normalization (macOS NFD â†” Windows/Linux NFC)
- **Features**: Automatic Unicode normalization for file uploads and operations
- **Integration**: Used in file upload handlers, viewer modals, and dashboard components

### MCP Server Enhancements
- **Improved Configuration**: Enhanced MCP server browsing and setup interface
- **Better Error Handling**: More robust connection management and error reporting
- **Deprecated Component Removal**: Cleanup of outdated MCP configuration components

## Model Context Protocol (MCP)

Standardized tool and resource access with plugin architecture

## Security & Isolation

### Sandbox Environment
- Docker containers for isolated execution
- Resource limits (memory, CPU)
- Controlled network and file access

### Tool Safety
- Input validation and sanitization
- Output filtering and safety checks
- Permission controls and audit logging

## Agent Use Cases

### Development Agents
Code generation, testing automation, CI/CD management

### Research Agents
Information gathering, market research, fact-checking

### Automation Agents
Workflow automation, data processing, system administration

### Creative Agents
Content generation, design assistance, media processing
