---
description:
globs:
alwaysApply: false
---
# Suna Development Workflow

## Environment Setup Structure

```
Development Environment:
├── Local Development
│   ├── Backend (Python/FastAPI)
│   │   ├── Python 3.11+
│   │   ├── Poetry or pip for dependencies
│   │   ├── Redis for caching
│   │   ├── Environment variables (.env)
│   │   └── Database connection (Supabase)
│   ├── Frontend (Next.js)
│   │   ├── Node.js 18+
│   │   ├── npm/yarn for dependencies
│   │   ├── Tailwind CSS for styling
│   │   └── TypeScript configuration
│   └── Agent Sandbox
│       ├── Docker for containerization
│       ├── Daytona for secure execution
│       └── Playwright for browser automation
├── External Services
│   ├── Supabase (Database + Auth + Storage)
│   ├── LLM Providers (Anthropic, OpenAI, Groq)
│   ├── Tavily (Web Search)
│   ├── Firecrawl (Web Scraping)
│   └── RapidAPI (External APIs)
└── Development Tools
    ├── Git for version control
    ├── Docker for containerization
    ├── Poetry for Python dependencies
    └── VS Code/Cursor for development
```

## Quick Start Guide

### 1. Initial Setup
```bash
# Clone the repository
git clone https://github.com/kortix-ai/suna.git
cd suna

# Run the interactive setup wizard
python setup.py

# Start the application
python start.py
```

### 2. Manual Development Setup

#### Backend Setup
```bash
cd backend

# Install dependencies with Poetry (recommended)
poetry install
poetry shell

# Or with pip
pip install -r requirements.txt

# Copy environment template
cp .env.example .env
# Edit .env with your configuration

# Start backend server
python api.py
```

#### Frontend Setup
```bash
cd frontend

# Install dependencies
npm install
# or
yarn install

# Start development server
npm run dev
# or
yarn dev
```

#### Database Setup
```bash
# Install Supabase CLI
npm install -g @supabase/cli

# Initialize Supabase (if not already done)
supabase init

# Start local Supabase
supabase start

# Apply migrations
supabase db push
```

## Environment Configuration

### Backend Environment Variables (.env)
```bash
# Core Configuration
ENVIRONMENT=development
DEBUG=true
HOST=0.0.0.0
PORT=8000

# Database Configuration
SUPABASE_URL=your_supabase_url
SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
DATABASE_URL=your_database_url

# LLM Provider Configuration
ANTHROPIC_API_KEY=your_anthropic_key
OPENAI_API_KEY=your_openai_key
GROQ_API_KEY=your_groq_key
DEFAULT_LLM_PROVIDER=anthropic
DEFAULT_MODEL=claude-3-sonnet-20240229

# Redis Configuration
REDIS_URL=redis://localhost:6379

# Agent Sandbox Configuration
DAYTONA_SERVER_URL=your_daytona_url
DAYTONA_API_KEY=your_daytona_key
SANDBOX_TIMEOUT=300
MAX_CONCURRENT_AGENTS=5

# Tool Configuration
TAVILY_API_KEY=your_tavily_key
FIRECRAWL_API_KEY=your_firecrawl_key
RAPIDAPI_KEY=your_rapidapi_key
LINKEDIN_EMAIL=your_linkedin_email
LINKEDIN_PASSWORD=your_linkedin_password

# Security Configuration
JWT_SECRET=your_jwt_secret
CORS_ORIGINS=http://localhost:3000,https://yourapp.com
```

### Frontend Environment Variables (.env.local)
```bash
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key

# Backend API Configuration
NEXT_PUBLIC_BACKEND_URL=http://localhost:8000

# Environment
NEXT_PUBLIC_ENVIRONMENT=development

# Analytics (optional)
NEXT_PUBLIC_SENTRY_DSN=your_sentry_dsn
```

## Development Commands

### Backend Commands
```bash
# Start development server
python api.py

# Start agent background processor
python run_agent_background.py

# Run tests
pytest

# Format code
black .
isort .

# Type checking
mypy .

# Start MCP local server
python -m mcp_local.server

# List available MCP tools
python list_mcp.py
```

### Frontend Commands
```bash
# Development server
npm run dev

# Build for production
npm run build

# Start production server
npm start

# Lint code
npm run lint

# Format code
npm run format

# Type checking
npm run type-check

# Test components
npm run test
```

### Docker Commands
```bash
# Start full development environment
docker-compose up -d

# Start only specific services
docker-compose up backend frontend

# View logs
docker-compose logs -f backend

# Rebuild containers
docker-compose build --no-cache

# Stop all services
docker-compose down
```

## File Watching and Hot Reload

### Backend (FastAPI)
- Uses `uvicorn --reload` for automatic reloading
- Watches `.py` files in the backend directory
- Restart required for environment variable changes
- Database connection pooling maintains connections

### Frontend (Next.js)
- Built-in Fast Refresh for React components
- TypeScript compilation on save
- Tailwind CSS hot reloading
- Automatic browser refresh for changes

### Agent Development
- Agent tools hot reload when modified
- MCP server restart required for new providers
- Docker container rebuilds for sandbox changes
- Tool configuration updates apply immediately

## Testing Workflow

### Backend Testing
```bash
# Run all tests
pytest

# Run specific test file
pytest tests/test_agents.py

# Run with coverage
pytest --cov=backend

# Test specific functionality
pytest -k "test_agent_execution"

# Test MCP integration
python test_mcp_use.py
```

### Frontend Testing
```bash
# Run component tests
npm run test

# Run E2E tests
npm run test:e2e

# Visual regression tests
npm run test:visual

# Test specific component
npm test -- --testNamePattern="ChatInterface"
```

### Integration Testing
```bash
# Test full agent workflow
python backend/test_agent_workflow.py

# Test API endpoints
pytest tests/test_api.py

# Test database operations
pytest tests/test_database.py
```

## Debugging Setup

### Backend Debugging
- Use Python debugger with `pdb.set_trace()`
- FastAPI automatic OpenAPI docs at `/docs`
- Structured logging with contextual information
- Error tracking with Sentry integration

### Frontend Debugging
- React Developer Tools extension
- Next.js debugging with source maps
- Browser DevTools for network inspection
- Component debugging with React Query DevTools

### Agent Debugging
- Agent execution logs in `backend/logs/`
- Sandbox container inspection with `docker exec`
- Tool execution tracing and timing
- Browser automation debugging with Playwright Inspector

## Code Quality Standards

### Python (Backend)
- **Formatter**: Black with line length 88
- **Import Sorting**: isort
- **Type Checking**: mypy with strict mode
- **Linting**: flake8 with custom rules
- **Testing**: pytest with >= 80% coverage

### TypeScript (Frontend)
- **Formatter**: Prettier with 2-space indentation
- **Linting**: ESLint with Next.js and TypeScript rules
- **Type Checking**: Strict TypeScript configuration
- **Testing**: Jest with React Testing Library
- **Styling**: Tailwind CSS with custom design system

### General Standards
- **Commit Messages**: Conventional Commits format
- **Branch Naming**: `feature/`, `bugfix/`, `hotfix/` prefixes
- **Pull Requests**: Required reviews and CI checks
- **Documentation**: Inline comments and README updates

## Deployment Preparation

### Production Build
```bash
# Backend production image
docker build -f backend/Dockerfile -t suna-backend .

# Frontend production build
cd frontend && npm run build

# Full production stack
docker-compose -f docker-compose.prod.yml up -d
```

### Environment Variables Validation
- All required variables documented in `.env.example`
- Validation scripts in `backend/utils/scripts/`
- Environment-specific configurations
- Security key rotation procedures

## Performance Optimization

### Backend Performance
- FastAPI async/await patterns
- Database query optimization
- Redis caching for frequent operations
- Background task processing with Celery
- Agent execution resource limits

### Frontend Performance
- Next.js App Router with Server Components
- React Query for API state management
- Image optimization with Next.js Image
- Code splitting and lazy loading
- Bundle analysis and optimization

### Infrastructure Performance
- Docker multi-stage builds for smaller images
- Database connection pooling
- CDN for static assets
- Load balancing for high availability
- Monitoring with metrics and alerts
